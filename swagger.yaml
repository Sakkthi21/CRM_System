openapi: 3.0.0
info:
  title: CRM Backend API
  description: API documentation for the CRM Backend System.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api # Replace with your server's base URL (development)
    description: Development Server
  - url: https://your-deployed-api.com/api # Replace with your deployed API URL
    description: Production Server
paths:
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationInput'
            example:
              name: John Doe
              email: john.doe@example.com
              password: securepassword
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request (e.g., validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Log in an existing user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLoginInput'
            example:
              email: john.doe@example.com
              password: securepassword
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT authentication token
                example:
                  token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        '400':
          description: Bad request (e.g., invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
  /customers:
    get:
      summary: Get all customers
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
          description: The page number for pagination (optional)
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
          description: The number of items per page (optional, default is 10)
        - in: query
          name: search
          schema:
            type: string
          description: Search query (searches by name, email, or phone)
        - in: query
          name: company
          schema:
            type: string
          description: Filter by company name
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized (missing or invalid JWT token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
            example:
              name: Jane Smith
              email: jane.smith@example.com
              phone: "+15551234567"
              company: "Acme Corp"
      responses:
        '201':
          description: Customer created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request (e.g., validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
  /customers/{id}:
    get:
      summary: Get a customer by ID
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Customer ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update a customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Customer ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerInput'
            example:
              name: Jane Doe
              email: jane.doe@example.com
              phone: "+15559876543"
              company: "Updated Corp"
      responses:
        '200':
          description: Customer updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          description: Bad request (e.g., validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    delete:
      summary: Delete a customer
      tags:
        - Customers
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Customer ID
      responses:
        '204':
          description: Customer deleted successfully
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
  /customers/{id}/interactions:
    get:
      summary: Get interactions for a customer
      tags:
        - Interactions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Customer ID
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Interaction'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
    post:
      summary: Create a new interaction for a customer
      tags:
        - Interactions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Customer ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InteractionInput'
            example:
              note: "Follow up on proposal"
              reminder: "2024-03-15T10:00:00Z"
      responses:
        '201':
          description: Interaction created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Interaction'
        '400':
          description: Bad request (e.g., validation error)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '404':
          description: Customer not found
components:
  schemas:
    UserRegistrationInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
      required:
        - name
        - email
        - password
    UserLoginInput:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
      required:
        - email
        - password
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Customer:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - name
        - email
        - phone
    CustomerInput:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        company:
          type: string
      required:
        - name
        - email
        - phone
    Interaction:
      type: object
      properties:
        id:
          type: integer
        customerId:
          type: integer
        note:
          type: string
        reminder:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
      required:
        - customerId
        - note
    InteractionInput:
      type: object
      properties:
        note:
          type: string
        reminder:
          type: string
          format: date-time
      required:
        - note
    Error:
      type: object
      properties:
        message:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
